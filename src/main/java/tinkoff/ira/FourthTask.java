package tinkoff.ira;

import java.util.Scanner;

public class FourthTask {

  public static void main(String[] args) {
    try (Scanner scanner = new Scanner(System.in)) {
      int n = scanner.nextInt();
      int x = scanner.nextInt();
      int y = scanner.nextInt();
      int z = scanner.nextInt();
      long[] a = new long[n];
      for (int i = 0; i < n; i++) {
        a[i] = scanner.nextLong();
      }
      int minOperations = findMinOperations(a, x, y, z);
      System.out.println(minOperations);
    }
  }

  private static int findMinOperations(long[] a, int x, int y, int z) {
    int minOpsX = Integer.MAX_VALUE;
    int minOpsY = Integer.MAX_VALUE;
    int minOpsZ = Integer.MAX_VALUE;
    if (y % x == 0 || z % x == 0) {
      minOpsX = 0;
    }
    if (x % y == 0 || z % y == 0) {
      minOpsY = 0;
    }
    if ((x % z == 0 || y % z == 0) && !(minOpsY == 0 && minOpsX == 0)) {
      minOpsZ = 0;
    }
    for (long num : a) {
      int opsX = (int) ((x - num % x) % x);
      minOpsX = Math.min(minOpsX, opsX);

      int opsY = (int) ((y - num % y) % y);
      minOpsY = Math.min(minOpsY, opsY);

      int opsZ = (int) ((z - num % z) % z);
      minOpsZ = Math.min(minOpsZ, opsZ);
    }
    return minOpsX + minOpsY + minOpsZ;
  }
}

//Задача, которую необходимо решить Герману, звучит следующим образом. Дана последовательность
//a_1, а_2,...,a_n и числа x, y, z.
//Разрешается произвольное количество (в том числе ноль) раз выполнить следующую операцию:
//выбрать произвольное і (1 <= і <= n) и увеличить а_i на единицу.
//Необходимо, чтобы хотя бы один элемент из последовательности делился на x,
//хотя бы один элемент делился на y и хотя бы один элемент делился на z.
//Разрешается, чтобы для разных значений из набора (x, y, z) подходил
// один и тот же элемент из последовательности.
//Помогите Герману отдохнуть перед сессией и найдите минимальное количество операций,
//которое необходимо выполнить, чтобы условие стало выполнено.
//Формат входных данных
//Первая строка содержит числа n (1 <= n <= 200000),
//1 <= x <= 1000000, 1 <= y <= 1000000, 1 <= z <= 1000000.
//Вторая строка содержит числа а_1, a_2, ..., a_n (1 <= a_i <= 1000000000000000000).
//Формат выходных данных
//Выведите одно число - минимальное количество операций, которое надо выполнить,
//чтобы для каждого из чисел x, y, z был хотя бы один элемент в последовательности,
//кратный данному числу. Напиши решение на языке Java
//Пример: Ввод: 6 10 20 30\n8 17 5 28 39 13\n Вывод 3
//Комментарий к примеру:
//В примере можно дважды увеличить a_4 и один раз увеличить a_5.
//Тогда на 10 будет делиться а_4, на 20 будет делиться a_5, на 30 будет делиться а_4.

//программа работает не правильно для следущего примера, она выводит 4 а должна выводить 3.
//Ввод: 6 10 20 30\n8 17 5 28 39 13\n Вывод 3: Комментарий к примеру:
//В примере можно дважды увеличить a_4 и один раз увеличить a_5.
//Тогда на 10 будет делиться а_4, на 20 будет делиться a_5, на 30 будет делиться а_4.
//Учти это и исправь программу

//2 12 22
//2 3 13
//2 3 13
//2 3 2
//1 1 2
//1 1 2